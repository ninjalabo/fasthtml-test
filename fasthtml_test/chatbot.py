"""Walkthrough of basic implementation for Chatbot."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_chatbot.ipynb.

# %% auto 0
__all__ = ['hdrs', 'app', 'client', 'ChatMessage', 'ChatInput', 'index', 'send']

# %% ../nbs/01_chatbot.ipynb 5
from fasthtml.common import *
from openai import OpenAI

# %% ../nbs/01_chatbot.ipynb 6
# Set up the app, including daisyui and tailwind for the chat component
hdrs = (picolink, Script(src="https://cdn.tailwindcss.com"),
        Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/daisyui@4.11.1/dist/full.min.css"))
app = FastHTML(hdrs=hdrs, cls="p-4 max-w-lg mx-auto")

# %% ../nbs/01_chatbot.ipynb 9
# Set up OpenAI API key (make sure to set your OpenAI API key here)
client = OpenAI(
    api_key="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", # Set your OpenAI API key here
    organization='org-Tsn20dQmqKgjiD2wUtFtrib7',
    project='proj_eZDDVOyD7u7vXAKK9hlsAzsC',
)

# %% ../nbs/01_chatbot.ipynb 12
# Chat message component (renders a chat bubble)
def ChatMessage(msg, user):
    paragraphs = msg.split("\n")
    # Set class to change displayed style of bubble
    bubble_class = "chat-bubble-primary" if user else 'chat-bubble-secondary'
    chat_class = "chat-end" if user else 'chat-start'
    return  Div(cls=f"chat {chat_class}")(
                Div('user' if user else 'assistant', cls="chat-header"),
                Div(*[P(p) for p in paragraphs], cls=f"chat-bubble {bubble_class}"),
                Hidden(msg, name="messages"),  # Hidden field for submitting past messages to form
                Hidden("user" if user else "assistant", name="roles")  # Hidden field for submitting corresponding owners
            )

# %% ../nbs/01_chatbot.ipynb 14
# The input field for the user message. Also used to clear the
# input field after sending a message via an OOB swap
def ChatInput():
    return Input(name='msg', id='msg-input', placeholder="Type a message",
                 cls="input input-bordered w-full", 
                 hx_swap_oob='true'  # Re-render the element to remove submitted message
                )

# %% ../nbs/01_chatbot.ipynb 17
@app.get('/')
def index():
    page =  Form(
                hx_post=send,  # Operation: some POST endpoint with function `send` 
                hx_target="#chatlist",  # Target: element with ID 'chatlist'
                hx_swap="beforeend"  # Location: just before the end of element
            )(
            # The chat list
                Div(id="chatlist", cls="chat-box h-[73vh] overflow-y-auto")(
                    # One initial message from AI assistant
                    ChatMessage("Hello! I'm a chatbot. How can I help you today?", False),
                ),
                # Input form
                Div(cls="flex space-x-2 mt-2")(
                   Group(ChatInput(), Button("Send", cls="btn btn-primary"))
                )
            )
    return Titled('Chatbot Demo', page)

# %% ../nbs/01_chatbot.ipynb 19
# Handle the form submission
@app.post
def send(msg: str, messages: list[str] = None, roles: list[str] = None):
    if not messages: messages = []
    if not roles: roles = []

    # Format the prompt for ChatGPT
    prompt = [ {"role": roles[i], "content": messages[i]} for i in range(len(messages)) ]
    
    # Add the user message to the prompt
    prompt.append({"role": "user", "content": msg})
    
    # Get the response from ChatGPT
    response = get_chatgpt_response(prompt)
    
    return (ChatMessage(msg, True),    # The user's message
            ChatMessage(response, False), # The chatbot's response
            ChatInput()) # And clear the input field via an OOB swap

# %% ../nbs/01_chatbot.ipynb 20
serve()
